•	What is the default value of all instance variables
For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null.
====================================
•	What will happen if you don’t initialize a local variable and try to print it?
The local variables are not initialized to any default values. We should
not use local variables with out initialization. Even the java compiler
throws error.\
=====================================================
•	What  is created in heap?
object
=========================================================
•	What are wrapper classes list all the wrapper classes
int  x = 25;//normal initialization
Integer  y = new Integer(33);//using wrapper classes



Primitive	Wrapper Class	
boolean		Boolean	
byte		Byte	
char		Character	
int		Integer	
float		Float	
double		Double	
long		Long	
short		Short	
======================================

•	Which type of variables must be initialized-mandatory
(ans:final variable)
============================================
•	Methods of object class


protected Object clone() throws CloneNotSupportedException
      Creates and returns a copy of this object.
public boolean equals(Object obj)
      Indicates whether some other object is "equal to" this one.
protected void finalize() throws Throwable
      Called by the garbage collector on an object when garbage
      collection determines that there are no more references to the object
public final Class getClass()
      Returns the runtime class of an object.
public int hashCode()
      Returns a hash code value for the object.
public String toString()
      Returns a string representation of the object.
=======================================================
equals():

public boolean equals(Object obj)
This method checks if some other object passed to it as an argument is equal
 to the object on which this method is invoked. The default implementation of
 this method in Object class simply checks if two object references x and y refer
 to the same object. i.e. It checks if x == y. This particular comparison is also
known as "shallow comparison". However, the classes providing their own implementations of 
the equals method are supposed to perform a "deep comparison"; by actually comparing the 
relevant data members. Since Object class has no data members that define its state, it simply
 performs shallow comparison.

hashcode:

public int hashCode()
This method returns the hash code value for the object on which this method is invoked. 
This method returns the hash code value as an integer and is supported for the benefit of 
hashing based collection classes such as Hashtable, HashMap, HashSet etc. This method must be
overridden in every class that overrides the equals method.
============================================
•	Difference between overriding and overloading
--
Overriding means having two methods with the same method name and parameters (i.e., method signature). One of the methods is in the parent class and the other is in the child class.
 Overriding allows a child class to provide a specific implementation of a method that is
 already provided its parent class.
--
Overloading occurs when two or more methods in one class have the same method name but different parameters.
===============================================
•	Abstract class,interfaces (modifiers of the data members in an interface)– discuss the points




Interfaces


An interface is an empty shell. There are only the signatures of the methods, which implies that the methods do not have a body.
 The interface can't do anything. It's just a pattern.

Abstract classes
Abstract classes, unlike interfaces, are classes. They are more expensive to use, 
because there is a look-up to do when you inherit from them.

Abstract classes look a lot like interfaces, but they have something more:
 You can define a behavior for them
===========================================================
aggregatuion in java :

If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.

Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. 
as given below.
--
class Employee{  
int id;  
String name;  
Address address;//Address is a class  
...  
}  
==============================================================
•	Can the final classes be instantiated,inherited ?

 final classes cannot be instantiated
 final class cannot be inherited but a final method can be inherited

There are three distinct meanings for the final keyword in Java.

A final class cannot be extended.

A final method cannot be overridden.

A final variable cannot be assigned to after it has been initialized.
=====================================================================

•	All the points w.r.t final variable,method and class

1) A constructor cannot be declared as final.
2) Local final variable must be initializing during declaration.
3) All variables declared in an interface are by default final.
4) We cannot change the value of a final variable.
5) A final method cannot be overridden.
6) A final class not be inherited.
7) If method parameters are declared final then the value of these parameters cannot be changed.
8) It is a good practice to name final variable in all CAPS.
9) final, finally and finalize are three different terms. finally is used in exception handling and
 finalize is a method that is called by JVM during garbage collection.
===========================================================================
Variable Argument (Varargs):
The varrags allows the method to accept zero or muliple arguments. Before varargs either we use overloaded method or take an 
array as the method parameter but it was not considered good because it leads to the maintenance problem. If we don't know how many argument we will have to pass 
in the method, varargs is the better approach.
